type User {
  id: ID!
  name: String!
  email: String!
  emailVerified: Boolean!
  fcmTokens: [String!]!
  createdAt: DateTime!
  updateAt: DateTime
}

input CreateAccountInput {
  name: String!
  email: EmailAddress!
  password: String!
}

type Query {
  currentUser: User! @isAuthenticated
  recoveryTokenExists(recoveryToken: String!): Boolean! @rateLimit(limit: 3, duration: 86400)
}

type Mutation {
  createAccount(input: CreateAccountInput!): Boolean! @rateLimit(limit: 3, duration: 86400)
  createSocialAccount(firebaseIdToken: String!): Boolean! @rateLimit(limit: 6, duration: 86400)
  confirmEmail(confirmationToken: String!): Boolean! @rateLimit(limit: 3, duration: 86400)
  login(email: EmailAddress!, password: String!): Boolean!  @rateLimit(limit: 12, duration: 86400)
  socialLogin(firebaseIdToken: String!): Boolean! @rateLimit(limit: 3, duration: 86400)
  sendPasswordRecoveryEmail(email: EmailAddress!): Boolean! @rateLimit(limit: 3, duration: 86400)
  recoverPassword(recoveryToken: String!, password: String!): Boolean! @rateLimit(limit: 3, duration: 86400)
  logout: Boolean! @rateLimit(limit: 12, duration: 86400)
  removeAccount(password: String!): Boolean! @isAuthenticated
  changeUserRole(userId: ID!, role: Role): Boolean! @isAuthenticated @hasRole(roles: [admin])
}